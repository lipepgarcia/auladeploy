{"version":3,"sources":["Header.js","Detalhes.js","Conecta.js","ItemLista.js","Listagem.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Component","Detalhes","state","ofertas","id","foto","nome","descricao","valor","loadOfertas","setState","handleChange","e","target","name","value","this","onClick","alert","Conecta","axios","create","baseURL","ItemLista","props","src","marca","Number","preco","toLocaleString","style","currency","Listagem","navigator","onLine","get","lista","data","localStorage","setItem","JSON","stringify","parse","getItem","dados","map","oferta","key","App","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5323d1fa.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-light bg-light navbar-fixed-top\">\r\n                <Link className=\"navbar-brand\" to=\"/\">Auto Peças - Avenida</Link>\r\n\r\n\r\n                \r\n\r\n              \r\n                \r\n                   \r\n                \r\n            </nav >\r\n        )\r\n    }\r\n}\r\n\r\n","\r\nimport React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\n\r\nexport default class Detalhes extends Component {\r\n\r\n\r\n    state = {\r\n        ofertas: [],\r\n        id: '',\r\n        foto: '',\r\n        nome: '',\r\n        descricao: '',\r\n        valor: 0\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.loadOfertas()\r\n    }\r\n\r\n    loadOfertas = () => {\r\n        let ofertas = []\r\n\r\n        this.setState({ ofertas })\r\n    }\r\n\r\n    handleChange = e => {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-4 mt-2 mb-2\">\r\n                        <div className=\"card bg-white text-dark\">\r\n                            {this.state.foto}\r\n\r\n                            <div className=\"card-body\">\r\n                                <h4 className=\"card-title\">\r\n                                    {this.state.nome}</h4>\r\n\r\n                                <p className=\"card-text\"><h6>Descrição:</h6>\r\n                                    {this.state.descricao}</p>\r\n\r\n                            </div>\r\n                            <Link to={'/'} className=\"btn btn-success\">\r\n                                Retornar\r\n                      </Link>\r\n                            <button className=\"btn btn-danger mb-2\" onClick={function () { alert('Comprado com sucesso!'); }}>Comprar</button>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\n","import axios from 'axios' \r\n\r\n\r\nconst Conecta = axios.create({baseURL: 'https://api.sheety.co/'})\r\n\r\nexport default Conecta","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst ItemLista = props => {\r\n    return (\r\n        <div className='card'>\r\n            <img src={props.foto} className=\"imgtop\" />\r\n            <div className='card-body'>\r\n                <h4 className='card-title'>{props.nome}</h4> \r\n                <p></p>\r\n                <h6 className='card-title'>{props.marca}</h6>\r\n                \r\n\r\n                <h4 className='preco'>\r\n                    {Number(props.preco).toLocaleString('pt-br', { style: 'currency', currency: 'BRL' })}\r\n                </h4>\r\n\r\n            </div>\r\n            <Link to={`/detalhes/${props.id}`} className=\"btn btn-danger\">Detalhes</Link>\r\n            <p></p>\r\n\r\n           \r\n\r\n                \r\n            \r\n\r\n            <p></p>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ItemLista","import React, { Component } from 'react'\r\n\r\nimport Conecta from './Conecta'\r\nimport ItemLista from './ItemLista'\r\n\r\n\r\nimport './Listagem.css'\r\n\r\nexport default class Listagem extends Component {\r\n\r\n\r\n    state = {\r\n        ofertas: []\r\n    }\r\n    componentDidMount() {\r\n        this.loadOfertas()\r\n      }\r\n    \r\n    async componentDidMount() {\r\n        if (navigator.onLine) {\r\n            const lista = await Conecta.get('45966615-0b85-4fd3-9487-57742a83bb65')\r\n            this.setState({ ofertas: lista.data })\r\n// salva em localStorage os nvoos dados\r\n            localStorage.setItem('super_avenida', JSON.stringify(lista.data))\r\n// obtém a lista dos dados salvos em localstorage\r\n        } else {\r\n            let dados = await JSON.parse(localStorage.getItem('super_avenida'))\r\n            this.setState({ ofertas: dados })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='container mt-2'>\r\n                <div className='card-deck'>\r\n                    {this.state.ofertas.map(oferta => (\r\n                        <ItemLista key={oferta.id}\r\n                            id={oferta.id}\r\n                            nome={oferta.nome}\r\n                            marca={oferta.marca}\r\n                            descricao={oferta.descricao}\r\n                            preco={oferta.preco}\r\n                            foto={oferta.foto} />\r\n                    ))}\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\n\nimport Header from './Header'\nimport Detalhes from './Detalhes'\nimport Listagem from './Listagem'\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Listagem />\n      \n      <Route path=\"/detalhes/:id\" component={Detalhes} />\n\n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if /* (process.env.NODE_ENV === 'production' && */ ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/custom-service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}